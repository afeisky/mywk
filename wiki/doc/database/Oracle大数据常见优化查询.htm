<h1 class="postTitle">
	<a class="postTitle2" href="http://www.cnblogs.com/myhappylife/p/5006774.html" id="cb_post_title_url">Oracle大数据常见优化查询</a></h1>
<div id="cnblogs_post_body">
	<p>
		1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
	<p>
		<br />
		<br />
		2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br />
		<br />
		select id from t where num is null<br />
		可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br />
		select id from t where num=0</p>
	<p>
		<br />
		3.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>
	<p>
		<br />
		4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br />
		select id from t where num=10 or num=20<br />
		可以这样查询：<br />
		select id from t where num=10<br />
		union all<br />
		select id from t where num=20</p>
	<p>
		<br />
		5.in 和 not in 也要慎用，否则会导致全表扫描，如：<br />
		select id from t where num in(1,2,3)<br />
		对于连续的数值，能用 between 就不要用 in 了：<br />
		select id from t where num between 1 and 3</p>
	<p>
		<br />
		6.下面的查询也将导致全表扫描：<br />
		select id from t where name like &#39;%abc%&#39;<br />
		若要提高效率，可以考虑全文检索。</p>
	<p>
		<br />
		7.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br />
		select id from t where num=@num<br />
		可以改为强制查询使用索引：<br />
		select id from t with(index(索引名)) where num=@num</p>
	<p>
		<br />
		8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br />
		select id from t where num/2=100<br />
		应改为:<br />
		select id from t where num=100*2</p>
	<p>
		<br />
		9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br />
		select id from t where substring(name,1,3)=&#39;abc&#39; // oracle总有的是substr函数。<br />
		select id from t where datediff(day,createdate,&#39;2005-11-30&#39;)=0 //查过了确实没有datediff函数。<br />
		应改为:<br />
		select id from t where name like &#39;abc%&#39;<br />
		select id from t where createdate&gt;=&#39;2005-11-30&#39; and createdate&lt;&#39;2005-12-1&#39; //<br />
		oracle 中时间应该把char 转换成 date 如： createdate &gt;= to_date(&#39;2005-11-30&#39;,&#39;yyyy-mm-dd&#39;)</p>
	<p>
		<br />
		10.不要在 where 子句中的&ldquo;=&rdquo;左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。（<span style="color: #ff0000;"><strong>采用函数处理的字段不能利用索引</strong></span>）<br />
		<br />
		11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>
	<p>
		<br />
		12.不要写一些没有意义的查询，如需要生成一个空表结构：<br />
		select col1,col2 into #t from t where 1=0<br />
		这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br />
		create table #t(...)</p>
	<p>
		<br />
		13.很多时候用 exists 代替 in 是一个好的选择：<br />
		select num from a where num in(select num from b)<br />
		用下面的语句替换：<br />
		select num from a where exists(select 1 from b where num=a.num)</p>
	<p>
		<br />
		14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>
	<p>
		<br />
		15.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>
	<p>
		<br />
		16.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>
	<p>
		<br />
		17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>
	<p>
		<br />
		18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
	<p>
		<br />
		19.任何地方都不要使用 select * from t ，用具体的字段列表代替&ldquo;*&rdquo;，不要返回用不到的任何字段。</p>
	<p>
		<br />
		20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>
	<p>
		<br />
		21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
	<p>
		<br />
		22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>
	<p>
		<br />
		23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
	<p>
		<br />
		24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>
	<p>
		<br />
		25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>
	<p>
		<br />
		26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>
	<p>
		<br />
		27.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括&ldquo;合计&rdquo;的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>
	<p>
		<br />
		28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>
	<p>
		<br />
		29.尽量避免大事务操作，提高系统并发能力。</p>
	<p>
		<br />
		30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
	<p>
		31. &nbsp;&nbsp;<strong>union操作符</strong></p>
	<p>
		union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，<br />
		删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史<br />
		表union。</p>
	<p>
		这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，<br />
		如果表数据量大的话可能会导致用磁盘进行排序。<br />
		推荐方案：采用union ALL操作符替代union，因为union ALL操作只是简单的将两个结果合并后就返回。</p>
	<p>
		&nbsp;32.&nbsp;尽量避免隐士类型转换</p>
	<div>
		容易引起oracle索引失效的原因很多：&nbsp;</div>
	<div>
		1）、在索引列上使用函数。如SUBSTR,DECODE,INSTR等，对索引列进行运算.需要建立函数索引就可以解决了。&nbsp;</div>
	<div>
		2）新建的表还没来得及生成统计信息，分析一下就好了&nbsp;</div>
	<div>
		3）、基于cost的成本分析，访问的表过小，使用全表扫描的消耗小于使用索引。&nbsp;</div>
	<div>
		4）、使用&lt;&gt;、not&nbsp;in&nbsp;、not&nbsp;exist，对于这三种情况大多数情况下认为结果集很大，一般大于5%-15%就不走索引而走FTS（全表扫描）。&nbsp;</div>
	<div>
		5）、单独的&gt;、&lt;。&nbsp;</div>
	<div>
		6）、like&nbsp;&quot;%_&quot;&nbsp;百分号在前。&nbsp;</div>
	<div>
		7）、单独引用复合索引里非第一位置的索引列。也就是说查询谓词并未使用组合索引的第一列，此处有一个INDEX SKIP SCAN概念</div>
	<div>
		&nbsp;8）、字符型字段为数字时在where条件里不添加引号。&nbsp;</div>
	<div>
		&nbsp;9）、当变量采用的是times变量，而表的字段采用的是date变量时.或相反情况。&nbsp;</div>
	<div>
		10）、索引失效，可以考虑重建索引，rebuild&nbsp;online。&nbsp;</div>
	<div>
		11）、B-tree索引&nbsp;is&nbsp;null不会走,is&nbsp;not&nbsp;null会走,位图索引&nbsp;is&nbsp;null,is&nbsp;not&nbsp;null&nbsp;&nbsp;都会走、联合索引&nbsp;is&nbsp;not&nbsp;null&nbsp;只要在建立的索引列（不分先后）都会走</div>
	<div>
		12） 、在包含有null值的table列上建立索引，当时使用select count(*) from table时不会使用索引。</div>
	<div>
		<p>
			13）、加上hint 还不走索引，那可能是因为你要走索引的这列是nullable，虽然这列没有空值。（将字段改为not null，就会走）</p>
	</div>
	<p>
		相关内容总结：<a href="http://www.jb51.net/article/37602.htm" target="_blank">http://www.jb51.net/article/37602.htm</a></p>
</div>
