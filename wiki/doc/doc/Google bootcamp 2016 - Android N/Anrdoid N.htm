<h1 class="postTitle">
	<a class="postTitle2" href="http://www.cnblogs.com/yishaochu/p/5465413.html" id="cb_post_title_url">Android N开发 你需要知道的一切</a></h1>
<hr />
<p>
	title: Android N开发 你需要知道的一切<br />
	tags: Android N,Android7.0,Android<br />
	---</p>
<p>
	转载请注明出处:<a class="uri" href="http://www.cnblogs.com/yishaochu/p/5465413.html">http://www.cnblogs.com/yishaochu/p/5465413.html</a></p>
<h3 id="一前言">
	一、前言</h3>
<p>
	如果你英文不错建议你去官网看，官网底部也有翻译语言选择。<br />
	官网地址:<a class="uri" href="http://developer.android.com/preview/api-overview.html#android_for_work">http://developer.android.com/preview/api-overview.html#android_for_work</a></p>
<p>
	当然一切的前提是你的电脑能访问外网。。。。天朝你懂的。。。。机智的我所以早早就给你们准备了FQ工具。<br />
	window版本下载:链接: <a class="uri" href="http://pan.baidu.com/s/1kVIWhin">http://pan.baidu.com/s/1kVIWhin</a> 密码: qwuf<br />
	mac版本下载:链接: <a class="uri" href="http://pan.baidu.com/s/1qYzPef6">http://pan.baidu.com/s/1qYzPef6</a> 密码: hg88</p>
<p>
	如果你不想这么麻烦，那就看我翻译的版本吧。。。。</p>
<h3 id="二关于android-n计划">
	二、关于Android N计划</h3>
<p>
	Android N预览版运行是2016年3月9日，计划于2016年第三季度发布。一共有5个预览版，正常情况下，4到6个星期更新一个预览版，现在<a href="http://developer.android.com/preview/support.html">第二个预览版</a>已经更新。</p>
<p>
	在前三预览版google提供了一个测试和开发环境，你可以找出你的应用程序跟Android N系统的兼容性.就是把你的APP在Android N系统上运行看看，会不会不兼容，Android N系统有什么bug你也可以跟google公司<a href="http://developer.android.com/preview/bug">反馈</a>。</p>
<p>
	在预览版本4跟5，你可以得到最终的API跟SDK，以及最终的系统镜像，这个时候提供标准的API，你可以进行应用程序兼容最终测试，以及优化，还可以加入最新的API。</p>
<h3 id="三进行android-n开发">
	三、进行Android N开发</h3>
<p>
	<img alt="这里写图片描述" height="235" src="http://img.blog.csdn.net/20160506135104357" width="749" /></p>
<p>
	开发流程:更新Android Studio2.1-&gt;更新Android N SDK-&gt;更新jdk8-&gt;更新你的Andorid项目-&gt;调用新的API<br />
	测试流程:有一个AndroidN的手机-&gt;安装你的app-&gt;测试你的app</p>
<p>
	1).更新Android Studio2.1<br />
	Android N增加了对java8的支持，需要调用一个名字是jack的编译器，jack的最新版本目前只有Android Studio2.1版本支持，如果你想使用java 8语言的特性，需要用Android Studio 2.1开发你的应用程序，如果你不需要jdk8的特性，但是你想要用Android N的sdk，你还是需要更新jdk8进行编译。</p>
<p>
	如果你已经安装了Android Studio但是版本是2.1以下 点击 Help &gt; Check for Update 就能更新到2.1版本。<br />
	如果你Android Studio根本没有安装过，<a href="http://developer.android.com/sdk/">点我进行下载</a></p>
<p>
	2).获取Android N预览版SDK<br />
	要使用Android N API进行开发，你需要安装Android N预览版的SDK到Android Studio中.</p>
<p>
	看到这张图片应该知道怎么下载了吧，具体步骤我就省略了。<br />
	<img alt="获取Android N预览版SDK" height="620" src="http://img.blog.csdn.net/20160506135132738" width="1087" /></p>
<p>
	3).获取Android N预览版参考文档<br />
	<a href="http://developer.android.com/shareables/preview/n-preview-2-docs.zip">n-preview-2-docs.zip</a></p>
<p>
	4).获取jdk 8<br />
	为了Android Studio 2.1编辑Android N版本的应用程序，您需要安装jdk 8，如果你不是jdk 8，自行下载更新吧。<br />
	然后设置Android Studio中的JDK版本如下：</p>
<ul>
	<li>
		打开Android的Studio中的Android项目，然后通过选择打开项目结构对话框File &gt; Project Structure。（或者，您也可以选择设置所有项目的默认 File &gt; Other Settings &gt; Default Project Structure）。</li>
	<li>
		在该对话框的左侧窗格中，单击SDK位置。</li>
	<li>
		在JDK位置字段中，输入Java JDK 8的位置（点击浏览你的文件右侧的按钮），然后单击确定。<br />
		<img alt="设置jdk8" height="466" src="http://img.blog.csdn.net/20160506135204952" width="869" /></li>
</ul>
<p>
	5).更新或者创建项目<br />
	使用Android N的API开发，你的项目必须进行适配。<br />
	如果你打算使用Java 8的特性，您还应该阅读 <a href="http://developer.android.com/preview/j8-jack.html">Java 8 有关支持的特性</a>，以及如何与jack编译器配置您的项目信息。</p>
<p>
	<strong>更新现有项目</strong><br />
	打开module下的build.gradle文件，并作如下更新：</p>
<pre>
 <code>android {    compileSdkVersion &#39;android-N&#39;    buildToolsVersion &#39;24.0.0-rc3&#39;    ...     defaultConfig {       minSdkVersion &#39;N&#39;       targetSdkVersion &#39;N&#39;       ...    }    ...  }</code></pre>
<p>
	<strong>创建一个新项目</strong><br />
	要用Android N预览版SDK开发一个新项目：</p>
<ul>
	<li>
		点击File &gt; New Project。按照步骤一直走，停留到选择Android 设备的界面。</li>
	<li>
		在这个界面上，可以选择手机跟平板电脑</li>
	<li>
		在手机和平板电脑的选择，在最小的SDK选项列表中，选择 N：Android的API 23，N预览（预览）</li>
</ul>
<h3 id="四android-n新功能">
	四、Android N新功能</h3>
<h4 id="多窗口支持">
	<strong>1.多窗口支持</strong></h4>
<p>
	在 Android N 中，我们为该平台引入了一个新的而且非常需要的多任务处理功能 &mdash; 多窗口支持。</p>
<p>
	现在，用户可以一次在屏幕上打开两个APP。</p>
<ul>
	<li>
		在运行 Android N 的手机和平板电脑上，用户可以并排运行两个APP，或者处于分屏模式时一个APP位于另一个APP之上。用户可以通过拖动两个APP之间的分隔线来调整APP。</li>
	<li>
		在 Android TV 设备上，APP可以将自身置于<a href="http://developer.android.com/preview/features/picture-in-picture.html">画中画面模式</a>，从而让它们可以在用户浏览或与其他APP交互时继续显示内容。如需了解详细信息，请参阅下文。</li>
</ul>
<p>
	多窗口支持为您提供新的吸引用户方式，特别是在平板电脑和其他更大屏幕的设备上。您甚至可以在您的APP中启用拖放，从而使用户可以方便地将内容拖放到您的应用或从其中拖出内容&mdash;这是一个非常好的增强用户体验的方式。</p>
<p>
	向您的APP添加多窗口支持并配置多窗口显示的处理方式非常简单。例如，您可以指定您的 Activity 允许的最小尺寸，从而防止用户将 Activity 调整到该尺寸以下。您还可以为APP禁用多窗口显示，这可确保系统将仅以全屏模式显示APP。</p>
<p>
	如需了解详细信息，请参阅<a href="http://developer.android.com/preview/features/multi-window.html">多窗口支持</a>开发者文档。</p>
<p>
	<img alt="在分屏模式下运行的APP" height="489" src="http://img.blog.csdn.net/20160506135259755" width="240" /></p>
<h4 id="notification-增强功能">
	<strong>2.Notification 增强功能</strong></h4>
<p>
	在 Android N 中，我们重新设计了Notification，使其更易于使用并且速度更快。部分变更包括：</p>
<ul>
	<li>
		模板更新：我们正在更新Notification模板，新强调了图片跟头像。开发者将能够充分利用新模板，只需进行少量的代码调整。</li>
	<li>
		绑定的Notification：系统可以将消息组合在一起（例如，按消息主题）并显示组。用户可以适当地进行 Dismiss 或 Archive 等操作。如果您已实现 Android Wear 的通知，那么您已经很熟悉此模型。</li>
	<li>
		直接回复：对于实时通信应用，Android 系统支持内联回复，以便用户可以直接在通知界面中快速回复短信。</li>
	<li>
		自定义视图：两个新的 API 让您在通知中使用自定义视图时可以充分利用系统的风格，如Notification标题和操作。</li>
</ul>
<p>
	<img alt="绑定的Notification和直接回复" height="528" src="http://img.blog.csdn.net/20160506135334767" width="259" /><img alt="绑定的Notification和直接回复" height="520" src="http://img.blog.csdn.net/20160506135346299" width="255" /><img alt="绑定的Notification和直接回复" height="522" src="http://img.blog.csdn.net/20160506135355974" width="257" /></p>
<p>
	如需了解如何实现新功能的信息，请参阅<a href="http://developer.android.com/preview/features/notification-updates.html">通知</a>指南。</p>
<h4 id="配置文件指导的-jitaot-编译">
	<strong>2.配置文件指导的 JIT/AOT 编译</strong></h4>
<p>
	在 Android N 中，我们添加了 Just in Time (JIT) 编译器，对 ART 进行代码分析，让它可以在应用运行时持续提升 Android 应用的性能。JIT 编译器对 Android 运行组件当前的 Ahead of Time (AOT) 编译器进行了补充，有助于提升运行时性能，节省存储空间，加快应用更新和系统更新速度。</p>
<p>
	配置文件指导的编译让 Android 运行组件能够根据应用的实际使用以及设备上的情况管理每个应用的 AOT/JIT 编译。例如，Android 运行组件维护每个应用的热方法的配置文件，并且可以预编译和缓存这些方法以实现最佳性能。对于应用的其他部分，在实际使用之前不会进行编译。</p>
<p>
	除提升应用的关键部分的性能外，配置文件指导的编译还有助于减少整个 RAM 占用，包括关联的二进制文件。此功能对于低内存设备非常尤其重要。</p>
<p>
	Android 运行组件在管理配置文件指导的编译时，可最大程度降低对设备电池的影响。仅当设备处于空闲状态和充电时才进行编译，从而可以通过提前执行该工作节约时间和省电。</p>
<h4 id="快速的应用安装路径">
	<strong>3.快速的应用安装路径</strong></h4>
<p>
	Android 运行组件的 JIT 编译器最实际的好处之一是应用安装和系统更新的速度。即使在 Android 6.0 中需要几分钟进行优化和安装的大型应用，现在只需几秒钟就可以完成安装。系统更新也变得更快，因为省去了优化步骤。</p>
<h4 id="瞌睡模式">
	<strong>4.瞌睡模式</strong></h4>
<p>
	Android 6.0 推出了瞌睡模式，即设备处于空闲状态时，通过推迟应用的 CPU 和网络活动以实现省电目的的系统模式，例如，设备放在桌上或抽屉里时。</p>
<p>
	现在，在 Android N 中，瞌睡模式又前进了一步，在外出时也可以省电。只要屏幕关闭了一段时间，且设备未插入电源，瞌睡模式就会对应用使用熟悉的 CPU 和网络限制。这意味着用户即使将设备放入口袋里也可以省电。<br />
	<img alt="瞌睡模式现在应用限制以延长电池寿命，即使设备未处于静止状态" src="http://img.blog.csdn.net/20160506135445894" /></p>
<p>
	屏幕关闭片刻后，设备在使用电池时，瞌睡模式将限制网络访问，同时延迟作业和同步。在短暂的维护时间范围后，其允许应用访问网络，并执行延迟的作业/同步。打开屏幕或将设备插入电源会使设备退出瞌睡模式。</p>
<p>
	当设备再次处于静止状态时，屏幕关闭且使用电池一段时间，瞌睡模式针对 <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html">PowerManager.WakeLock</a>, <a href="http://developer.android.com/reference/android/app/AlarmManager.html">AlarmManager</a> 警报和 GPS/Wi-Fi 扫描应用完整 CPU 和网络限制。</p>
<p>
	无论设备是否处于运动状态，将应用调整到瞌睡模式的最佳做法均相同，因此，如果您已更新应用以妥善处理瞌睡模式，则一切就绪。如果不是，请立即开始<a href="http://developer.android.com/training/monitoring-device-state/doze-standby.html#assessing_your_app">将应用调整到瞌睡模式</a>。</p>
<h4 id="project-svelte后台优化">
	<strong>5.Project Svelte：后台优化</strong></h4>
<p>
	Project Svelte 在持续改善，以最大程度减少生态系统中一系列 Android 设备中系统和应用使用的 RAM。在 Android N 中，Project Svelte 注重优化在后台中运行应用的方式。</p>
<p>
	后台处理是大多数应用的一个重要部分。处理得当，可让您实现非常棒的用户体验 &mdash; 即时、快速和情境感知。如果处理不得当，后台处理会毫无必要地消耗 RAM（和电池），同时影响其他应用的系统性能。</p>
<p>
	自 Android 5.0 发布以来，<a href="http://developer.android.com/reference/android/app/job/JobScheduler.html">JobScheduler</a> 已成为执行后台工作的首选方式，其工作方式有利于用户。应用可以在安排作业的同时允许系统基于内存、电源和连接情况进行优化。JobScheduler 可实现控制和简洁性，我们想要所有应用都使用它。</p>
<p>
	另一个非常好的选择是 <a href="https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager">GCMNetworkManager</a>（Google Play 服务的一部分），其在旧版 Android 中提供类似的作业安排和兼容性。</p>
<p>
	我们在继续扩展 JobScheduler 和 GCMNetworkManager，以符合多个用例 &mdash; 例如，在 Android N 中，现在，您可以基于内容提供程序中的更改安排后台工作。同时，我们开始弃用一些较旧的模式，这些模式会降低系统性能，特别是低内存设备的系统性能。</p>
<p>
	在 Android N 中，我们删除了三个常用隐式广播 &mdash; CONNECTIVITY_ACTION、ACTION_NEW_PICTURE 和 ACTION_NEW_VIDEO &mdash; 因为这些广播可能会一次唤醒多个应用的后台进程，同时会耗尽内存和电池。如果您的应用收到这些广播，请充分利用 N Developer Preview 以迁移到 JobScheduler 和相关的 API。</p>
<p>
	如需了解详情，请查看<a href="http://developer.android.com/preview/features/background-optimization.html">后台优化</a>文档。</p>
<h4 id="data-saver">
	<strong>6.Data Saver</strong></h4>
<p>
	在移动设备的整个生命周期，蜂窝数据计划的成本通常会超出设备本身的成本。对于许多用户而言，蜂窝数据是他们想要节省的昂贵资源。</p>
<p>
	Android N 推出了 Data Saver 模式，这是一项新的系统服务，有助于减少应用使用的蜂窝数据，无论是在漫游，账单周期即将结束，还是使用少量的预付费数据包。Data Saver 让用户可以控制应用使用蜂窝数据的方式，同时让开发者打开 Data Saver 时可以提供更多有效的服务。</p>
<p>
	用户在 Settings 中启用 Data Saver 且设备位于按流量计费的网络上时，系统屏蔽后台数据使用，同时指示应用在前台尽可能使用较少的数据 &mdash; 例如，通过限制用于流媒体服务的比特率、降低图片质量、延迟最佳的预缓冲等方法来实现。用户可以将特定应用加入白名单以允许后台按流量的数据使用，即使在 打开 Data Saver 时也是如此。<br />
	<img alt="设置中的 Data Saver" src="http://img.blog.csdn.net/20160506135511582" /><br />
	Android N 继承了 <a href="http://developer.android.com/reference/android/net/ConnectivityManager.html">ConnectivityManager</a>，以便为应用<a href="http://developer.android.com/preview/features/data-saver.html#status">检索用户的 Data Saver 首选项</a>并<a href="http://developer.android.com/preview/features/data-saver.html#monitor-changes">监控首选项变更</a>提供一种方式。所有应用均应检查用户是否已启用 Data Saver 并努力限制前台和后台数据的使用。</p>
<h4 id="快速设置tile-api">
	<strong>7.快速设置Tile API</strong></h4>
<p>
	&ldquo;快速设置&rdquo;通常用于直接从通知栏显示关键设置和操作，非常简单。在 Android N 中，我们已扩展&ldquo;快速设置&rdquo;的范围，使其更加有用更方便。</p>
<p>
	我们为额外的&ldquo;快速设置&rdquo;Tile添加了更多空间，用户可以通过向左或向右滑动跨分页的显示区域访问它们。我们???让用户可以控制显示哪些&ldquo;快速设置&rdquo;Tile以及显示的位置 &mdash; 用户可以通过拖放Tile来添加或移动Tile。</p>
<p>
	对于开发者，Android N 还添加了一个新的 API，从而让您可以定义自己的&ldquo;快速设置&rdquo;Tile，使用户可以轻松访问您应用中的关键控件和操作。</p>
<p>
	对于急需或频繁使用的控件和操作，保留&ldquo;快速设置&rdquo;Tile，且不应将其用作启动应用的快捷方式。</p>
<p>
	定义Tile后，您可以将它们显示给用户，用户可通过拖放将Tile添加到&ldquo;快速设置&rdquo;。<br />
	<img alt="通知栏中的快速设置图块" height="857" src="http://img.blog.csdn.net/20160506135535818" width="718" /></p>
<p>
	如需创建应用Tile的更多信息，请参阅可下载的 <a href="http://developer.android.com/preview/setup-sdk.html#docs-dl">API 参考</a>中的 android.service.quicksettings.Tile。</p>
<h4 id="号码屏蔽">
	<strong>8.号码屏蔽</strong></h4>
<p>
	Android N 现在支持在平台中进行号码屏蔽，提供框架 API，让服务提供商可以维护屏蔽的号码列表。默认短信应用、默认手机应用和提供商应用可以对屏蔽的号码列表进行读取和写入操作。其他应用则无法访问此列表。</p>
<p>
	通过使号码屏蔽成为平台的标准功能，Android 为应用提供一致的方式来支持广泛的设备上的号码屏蔽。应用可以利用的其他优势包括：</p>
<ul>
	<li>
		还会屏蔽已屏蔽的来电号码发出的短信</li>
	<li>
		通过 Backup &amp; Restore（备份和还原）功能可以跨重置和设备保留屏蔽的号码</li>
	<li>
		多个应用可以使用相同的屏蔽号码列表</li>
</ul>
<p>
	此外，通过 Android 的运营商应用集成表示运营商可以读取设备上屏蔽的号码列表，并为用户执行服务端屏蔽，以阻止不需要的来电和短信通过任何介质（如 VOIP 端点或转接电话）到达用户。</p>
<p>
	如需了解详细信息，请参阅可下载的 <a href="http://developer.android.com/preview/setup-sdk.html#docs-dl">API 参考</a>中的 android.provider.BlockedNumberContract。</p>
<h4 id="来电过滤">
	<strong>9.来电过滤</strong></h4>
<p>
	Android N 允许默认的手机应用过滤来电。手机应用执行此操作的方式是实现新的 CallScreeningService，该方法允许手机应用基于来电的 Call.Details 执行大量操作，例如：</p>
<ul>
	<li>
		拒绝来电</li>
	<li>
		不允许来电到达呼叫日志</li>
	<li>
		不向用户显示来电通知</li>
</ul>
<p>
	如需了解详细信息，请参阅可下载的 <a href="http://developer.android.com/preview/setup-sdk.html#docs-dl">API 参考</a>中的 android.telecom.CallScreeningService。</p>
<h4 id="多区域设置支持多语言">
	<strong>10.多区域设置支持、多语言</strong></h4>
<p>
	Android N 现在允许用户在设置中选择多个区域设置，以更好地支持双语用例。应用可以使用新的 API 获取用户选择的区域设置，然后为多区域设置用户提供更成熟的用户体验 &mdash; 如以多个语言显示搜索结果，并且不会以用户了解的语言翻译网页。</p>
<p>
	除多区域设置支持外，Android N 还扩展了用户可用的语言范围。它针对常用语言提供超过 25 种的变体，如英语、西班牙语、法语和阿拉伯语。它还针对 100 多种新语言添加了部分支持。</p>
<p>
	应用可以通过调用 LocaleList.GetDefault() 获取用户设置的区域设置列表。为支持扩展的区域设置数量，Android N 正在改变其解析资源的方式。请务必使用新的资源解析逻辑测试和验证您的应用是否能如期运行。</p>
<p>
	如需有关新资源解析行为和应遵循的最佳做法的更多信息，请参阅<a href="http://developer.android.com/preview/features/multilingual-support.html">多语言支持</a>。</p>
<h4 id="android-中的-icu4j-api">
	<strong>11.Android 中的 ICU4J API</strong></h4>
<p>
	Android N 目前在 Android 框架（位于 android.icu 软件包下）中提供 <a href="http://site.icu-project.org/">ICU4J</a> API 的子集。迁移很简单，主要是需要从 com.java.icu 命名空间更改为 android.icu。如果您已在您的应用中使用 ICU4J 捆绑包，切换到 Android 框架中提供的 android.icu API 可以大量节省 APK 大小。</p>
<p>
	如果要了解有关 Android ICU4J API 的更多信息，请参阅 <a href="http://developer.android.com/preview/features/icu4j-framework.html">ICU4J 支持</a>。</p>
<h4 id="opengl-es-3.2-api">
	<strong>12.OpenGL&trade; ES 3.2 API</strong></h4>
<p>
	Android N 添加了框架接口和对 OpenGL ES 3.2 的平台支持，包括：</p>
<ul>
	<li>
		来自 <a href="https://www.khronos.org/registry/gles/extensions/ANDROID/ANDROID_extension_pack_es31a.txt">Android 扩展包</a> (AEP) 的所有扩展（EXT_texture_sRGB_decode 除外）。</li>
	<li>
		针对 HDR 的浮点帧缓冲和延迟着色。</li>
	<li>
		BaseVertex 绘图调用可实现更好的批处理和流媒体服务。</li>
	<li>
		强大的缓冲区访问控制可减少 WebGL 开销。</li>
</ul>
<p>
	Android N 上适用于 OpenGL ES 3.2 的框架 API 与 GLES32 类一起提供。使用 OpenGL ES 3.2 时，请务必通过 标记和 android:glEsVersion 属性在您的清单文件中声明要求。</p>
<p>
	如需了解有关使用 OpenGL ES 的信息，包括如何在运行时检查设备支持的 OpenGL ES 版本，请参阅 <a href="http://developer.android.com/guide/topics/graphics/opengl.html">OpenGL ES API 指南</a>。</p>
<h4 id="android-tv-录制">
	<strong>13.Android TV 录制</strong></h4>
<p>
	Android N 通过新的录制 API 添加了从 Android TV 输入服务录制和播放内容的功能。构建在现有时移 API 之上，TV 输入服务可以控制能够录制的渠道数据、保存录制的会话的方式，同时可通过录制的内容管理用户交互。</p>
<p>
	如需了解详细信息，请参阅 <a href="http://developer.android.com/preview/features/tv-recording-api.html">Android TV 录制 API</a>。</p>
<h4 id="android-for-work">
	<strong>14.Android for Work</strong></h4>
<p>
	Android for Work 针对运行 Android N 的设备添加了许多新功能和 API。部分重要内容如下&mdash; 有关与 Android N 相关的 Android for Work 更新的完整列表，请参阅 Android for Work 变更。</p>
<h4 id="关闭工作">
	<strong>15.关闭工作</strong></h4>
<p>
	在具有托管配置文件的设备上，用户可以切换工作模式。工作模式关闭时，管理的用户临时关闭，其禁用托管配置文件应用、后台同步和通知。这包括配置文 件所有者应用。关闭工作模式时，系统显示永久状态图标，以提醒用户他们无法启动工作应用。启动器指示该工作应用和小组件无法访问。</p>
<h4 id="always-on-vpn">
	<strong>16.Always on VPN</strong></h4>
<p>
	设备所有者和配置文件所有者可以确保工作应用始终通过指定的 VPN 连接。系统在设备启动后自动启动该 VPN。</p>
<p>
	新的 DevicePolicyManager 方法为 setAlwaysOnVpnPackage() 和 getAlwaysOnVpnPackage()。</p>
<p>
	由于 VPN 服务无需应用交互即可由系统直接绑定，因此，VPN 客户端必须针对 Always on VPN 处理新的入口点。和以前一样，由与操作匹配的 Intent 过滤器将服务指示给系统。android.net.VpnService。</p>
<p>
	用户还可以使用 Settings&gt;More&gt;Vpn 在主要用户中手动设置实现 VPNService 方法的 Always on VPN 客户端。</p>
<h4 id="辅助工具增强功能">
	<strong>17.辅助工具增强功能</strong></h4>
<p>
	Android N 现在针对新的设备设置直接在欢迎屏幕上提供&ldquo;Vision Settings&rdquo;。这使用户可以更容易发现和配置他们设备上的辅助工具功能，包括放大手势、字体大小、显示屏尺寸和 TalkBack。</p>
<p>
	随着这些辅助工具功能更为突出，在启用这些功能后，您的用户更可能试用您的应用。请务必提前启用这些设置测试您的应用。您可以通过 Settings &gt; Accessibility 启用它们。</p>
<p>
	还是在 Android N 中，辅助工具服务现在可以帮助具有动作障碍的用户触摸屏幕。全新的 API 允许使用人脸追踪、眼球追踪、点扫描等功能构建服务，以满足这些用户的需求。</p>
<p>
	如需了解详细信息，请参阅可下载的 <a href="http://developer.android.com/preview/setup-sdk.html#docs-dl">API 参考</a> 中的 android.accessibilityservice.GestureDescription</p>
<h4 id="直接启动">
	<strong>18.直接启动</strong></h4>
<p>
	直接启动可以缩短设备启动时间，让注册的应用具有有限的功能，即使在意外重启后。例如，如果当用户睡觉时加密的设备重启，那么注册的警报、消息和来电现在可以和往常一样继续通知用户。这也意味着重启后辅助工具服务会立即可用。</p>
<p>
	在 Android N 中，直接启动充分利用基于文件的加密，以针对系统和应用数据启用细化的加密策略。为系统和应用数据。系统针对选定的系统数据和显式注册的应用数据使用设备加密的存储。默认情况下，凭据加密的存储可用于所有其他系统数据、用户数据、应用及应用数据。</p>
<p>
	启动时，系统在受限的模式中启动，仅访问设备加密的数据，不会对应用或数据进行常规访问。如果您有想要在此模式下运行的组件，您可以通过在清单文件 中设置标记注册它们。重启后，系统通过广播 LOCKED_BOOT_COMPLETED Intent 激活注册的组件。系统确保注册的设备加密的应用数据在解锁前可用。所有其他数据在用户确认锁定屏幕凭据进行解密前均不可用。</p>
<p>
	如需了解详细信息，请参阅<a href="http://developer.android.com/preview/features/direct-boot.html">直接启动</a>。</p>
<h4 id="密钥认证">
	<strong>19.密钥认证</strong></h4>
<p>
	使用硬件支持的密钥库，可更安全地在 Android 设备上创建、存储和使用加密密钥。它们可保护密钥免受 Linux 内核、潜在的 Android 漏洞的攻击，也可防止从已取得 root 权限的设备提取密钥。</p>
<p>
	为了让硬件支持的密钥库使用起来更简单和更安全，Android N 引入了密钥认证。应用和关闭的设备可使用密钥认证以坚决地确定 RSA 或 EC 密钥对是否受硬件支持、密钥对的属性如何，以及其使用和有效性有何限制。</p>
<p>
	应用和关闭的设备服务可以通过 X.509 认证证书（必须由有效的认证密钥签署）请求有关密钥对的信息。认证密钥是一个 ECDSA 签署密钥，其在出厂时被注入设备的硬件支持的密钥库。因此，有效的认证密钥签署的认证证书可确认硬件支持的密钥库是否存在，以及该密钥库中密钥对的详细信 息。</p>
<p>
	为确保设备使用安全的官方 Android 出厂映像，密钥认证要求设备 <a href="https://source.android.com/security/verifiedboot/verified-boot.html#bootloader_requirements">bootloader</a> 向<a href="https://source.android.com/security/trusty/index.html">可信执行环境 (TEE)</a> 提供以下信息：</p>
<ul>
	<li>
		设备上安装的操作系统版本和补丁级别</li>
	<li>
		验证的启动公钥和锁定状态。</li>
</ul>
<p>
	如需了解有关硬件支持的密钥库功能的详细信息，请参阅<a href="https://source.android.com/security/keystore/">硬件支持的密钥库</a>指南。</p>
<p>
	除密钥认证外，Android N 还推出了指纹绑定密钥，在指纹注册时不会撤销。</p>
<h4 id="网络安全性配置">
	<strong>20.网络安全性配置</strong></h4>
<p>
	在 Android N 中，通过使用说明性网络安全性配置（而不是使用传统的易出错的编程 API（例如，X509TrustManager）），应用可以安全地自定义其安全（HTTPS、TLS）连接的行为，无需任何代码修改。</p>
<p>
	支持的功能：</p>
<ul>
	<li>
		自定义信任锚。让应用可以针对其安全连接自定义哪些证书颁发机构 (CA) 受信任。例如，信任特定的自签署证书或受限的公共 CA 集。</li>
	<li>
		仅调试重写。让应用开发者可以安全调试其应用的安全连接，而不会增加安装基础的风险。</li>
	<li>
		明文流量退出。让应用可以防止自身意外使用明文流量。</li>
	<li>
		固定证书。这是一项高级功能，让应用可以针对安全连接限制哪些服务器密钥受信任。<br />
		如需了解详细信息，请参阅<a href="http://developer.android.com/preview/features/security-config.html">网络安全性配置</a>。</li>
</ul>
<h4 id="默认受信任的证书颁发机构">
	<strong>21.默认受信任的证书颁发机构</strong></h4>
<p>
	默认情况下，针对 Android N 的应用仅信任系统提供的证书，且不再信任用户添加的证书颁发机构 (CA)。如果针对 Android N 的应用希望信任用户添加的 CA，则应使用<a href="http://developer.android.com/preview/features/security-config.html">网络安全性配置</a>以指定信任用户 CA 的方式。</p>
<h4 id="apk-signature-scheme-v2">
	<strong>22.APK signature scheme v2</strong></h4>
<p>
	PackageManager 类现在支持使用 APK signature scheme v2 验证应用。APK signature scheme v2 是一个整个文件签名架构，通过检测对 APK 文件进行的任何未经授权更改，可大幅提高验证速度，同时也可加强完整性保证。</p>
<p>
	为保持向后兼容，在使用 v2 签名架构签署之前，APK 必须先使用 v1 签名架构（JAR 签名架构）签署。对于 v2 签名架构，如果在使用 v2 架构签署后使用额外的证书签署 APK，验证将失败。</p>
<p>
	APK signature scheme v2 支持稍后将在 N Developer Preview中推出。</p>
<h4 id="作用域目录访问">
	<strong>23.作用域目录访问</strong></h4>
<p>
	在 Android N 中，应用可以使用新的 API 请求访问特定的外部存储目录，包括可移动媒体上的目录，如 SD 卡。新 API 大大简化了应用访问标准外部存储目录的方式，如 Pictures 目录。应用（如照片应用）可以使用这些 API（而不是使用 READ_EXTERNAL_STORAGE），其授予所有存储目录的访问权限或存储访问框架，从而让用户可以导航到目录。</p>
<p>
	此外，新的 API 简化了用户向应用授予外部存储访问权限的步骤。当您使用新的 API 时，系统使用一个简单的权限 UI，其清楚地详细介绍应用正在请求访问的目录。</p>
<p>
	如需了解详细信息，请参阅<a href="http://developer.android.com/preview/features/scoped-folder-access.html">作用域目录访问</a>开发者文档。</p>
<p>
	各位看官如果觉得文章不错，帮忙点个赞吧，对于你来说是举手之劳，但对于我来说这就是坚持下去的动力。</p>
<p>
	如果你想第一时间看我们的后期文章，扫码关注公众号，每周不定期推送Android开发实战教程文章，你还等什么，赶快关注吧，学好技术，出任ceo，赢取白富美。。。。</p>
